#!/bin/bash
# widev

source .env

export MYSQL_PWD=$MYSQL_ROOT_PASSWORD
MYSQL="$(which mysql)"
SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
folder="$SCRIPT_DIR/../../bck/from_live"

# [LOG]
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
RESET='\033[0m'

log() {
  local COLOR="$1"
  local MESSAGE="$2"
  echo -e "${COLOR}${MESSAGE}${RESET}"
}
# [/LOG]

# [COMMAND-LINE OPTIONS]
DOWNLOAD=false
UNZIP=false
RESTORE=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    --download)
      DOWNLOAD=true
      shift
      ;;
    --unzip)
      UNZIP=true
      shift
      ;;
    --restore)
      RESTORE=true
      shift
      ;;
    -*)  # Short options, possibly combined
      FLAGS="${1:1}"  # Remove leading dash
      for (( i=0; i<${#FLAGS}; i++ )); do
        case "${FLAGS:$i:1}" in
          d) DOWNLOAD=true ;;
          z) UNZIP=true ;;
          r) RESTORE=true ;;
          *) log "$RED" "Unknown option: -${FLAGS:$i:1}"; exit 1 ;;
        esac
      done
      shift
      ;;
    *)
      log "$RED" "Unknown argument: $1"
      exit 1
      ;;
  esac
done
# [/COMMAND-LINE OPTIONS]

log "$GREEN" "start"

if [ "$DOWNLOAD" = true ]; then
log "$CYAN" "[DOWNLOAD]"
if [ -z "$REMOVE_BCK_URL" ] || [ -z "$REMOVE_BCK_USER" ] || [ -z "$REMOVE_BCK_FILES" ]; then
	log "$RED" "REMOVE_BCK_URL, REMOVE_BCK_USER, REMOVE_BCK_FILES are required. Skip downloadâ€¦"
else
	check_file() {
		local file_url="$1"
		if curl --silent --head --fail -u "$REMOVE_BCK_USER:$REMOVE_BCK_PWD" "$file_url" > /dev/null; then
			return 0
		else
			return 1
		fi
	}

	get_available_date() {
		local filename="$1"
		local current_date=$(date +%Y%m%d)
		local yesterday_date=$(date -d "yesterday" +%Y%m%d)

		# check if exist today's bck
		if check_file "$REMOVE_BCK_URL${filename//%DATE%/$current_date}"; then
			echo "$current_date"
		# if no, check yesterday's bck
		elif check_file "$REMOVE_BCK_URL${filename//%DATE%/$yesterday_date}"; then
			echo "$yesterday_date"
		else
			echo ""
		fi
	}

	mkdir -p "$folder"

	IFS=',' read -r -a FILE_PATTERNS <<< "$REMOVE_BCK_FILES"

	# Try to get the available date for the first file
	FILENAME="${FILE_PATTERNS[0]}"
	AVAILABLE_DATE=$(get_available_date "$FILENAME")

	if [ -z "$AVAILABLE_DATE" ]; then
		log "$RED" "no remove backup files or error access"
		exit 1
	fi

	for PATTERN in "${FILE_PATTERNS[@]}"; do
		# remove spaces
		CLEANED=$(echo "$PATTERN" | xargs)

		if [ -z "$CLEANED" ]; then
			continue
		fi

		FILENAME="${CLEANED//%DATE%/$AVAILABLE_DATE}"

		log "$BLUE" "Download: $FILENAME"
		curl -u "$REMOVE_BCK_USER:$REMOVE_BCK_PWD" -O "$REMOVE_BCK_URL$FILENAME" --output-dir "$folder"
	done
fi
log "$CYAN" "[/DOWNLOAD]"
fi

if ! find $folder -type f | read; then
	log "$RED" "backup folder is empty"
	exit 1
fi

if [ "$UNZIP" = true ]; then
log "$CYAN" "[UNZIP]"
if ls "$folder"/*.gz &>/dev/null; then
	for archive in "$folder"/*.gz; do
		if [ -f "$archive" ]; then
			log "$BLUE" "Unzip: $archive..."
			gunzip "$archive"
		fi
	done
else
	log "$RED" "No .gz files"
fi
log "$CYAN" "[/UNZIP]"
fi

if [ "$RESTORE" = true ]; then
log "$CYAN"  "[RESTORE]"
mysqladmin -u $MYSQL_USER -h $MYSQL_REMOTE_HOST status &>/dev/null
if [ ! $? -eq 0 ]; then
	log "$RED" "MySQL server not available"
	exit 1;
fi

if ls "$folder"/*.sql &>/dev/null; then
	for sql_file in "$folder"/*.sql; do
		if [ -f "$sql_file" ]; then
			log "$BLUE" "Restoring: $sql_file..."
			pv "$sql_file" | $MYSQL -u $MYSQL_USER -h $MYSQL_REMOTE_HOST $MYSQL_DB

			# If the restoration is successful
			if [ $? -eq 0 ]; then
				log "$YELLOW" "Restoration successful, deleting $sql_file..."
				rm "$sql_file"
			else
				log "$RED" "Restoration failed for $sql_file, skipping deletion."
				exit 1
			fi
		fi
	done
else
	log "$RED" "No .sql files"
fi
log "$CYAN" "[/RESTORE]"
fi

log "$GREEN" "fin"
exit 0